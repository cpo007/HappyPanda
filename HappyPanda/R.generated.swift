//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `icon_artist`.
    static let icon_artist = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_artist")
    /// Image `icon_backbtn_background`.
    static let icon_backbtn_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_backbtn_background")
    /// Image `icon_cookies`.
    static let icon_cookies = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cookies")
    /// Image `icon_readbar_background`.
    static let icon_readbar_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_readbar_background")
    /// Image `icon_tag`.
    static let icon_tag = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tag")
    /// Image `icon_upload_time`.
    static let icon_upload_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_upload_time")
    /// Image `nav_back_black`.
    static let nav_back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_back_black")
    
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_artist", bundle: ..., traitCollection: ...)`
    static func icon_artist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_artist, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_backbtn_background", bundle: ..., traitCollection: ...)`
    static func icon_backbtn_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_backbtn_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_cookies", bundle: ..., traitCollection: ...)`
    static func icon_cookies(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cookies, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_readbar_background", bundle: ..., traitCollection: ...)`
    static func icon_readbar_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_readbar_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tag", bundle: ..., traitCollection: ...)`
    static func icon_tag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tag, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_upload_time", bundle: ..., traitCollection: ...)`
    static func icon_upload_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_upload_time, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_back_black", bundle: ..., traitCollection: ...)`
    static func nav_back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_back_black, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ComicDetailCell`.
    static let comicDetailCell = _R.nib._ComicDetailCell()
    
    /// `UINib(name: "ComicDetailCell", in: bundle)`
    static func comicDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.comicDetailCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ComicDetailCell`.
    static let comicDetailCell: Rswift.ReuseIdentifier<ComicDetailCell> = Rswift.ReuseIdentifier(identifier: "ComicDetailCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ComicDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ComicDetailCell
      
      let bundle = R.hostingBundle
      let identifier = "ComicDetailCell"
      let name = "ComicDetailCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ComicDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComicDetailCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationController
      
      let bundle = R.hostingBundle
      let comicDetailController = StoryboardViewControllerResource<ComicDetailController>(identifier: "ComicDetailController")
      let configurationController = StoryboardViewControllerResource<ConfigurationController>(identifier: "ConfigurationController")
      let corridorsController = StoryboardViewControllerResource<CorridorsController>(identifier: "CorridorsController")
      let name = "Main"
      let trajectoryController = StoryboardViewControllerResource<TrajectoryController>(identifier: "TrajectoryController")
      
      func comicDetailController(_: Void = ()) -> ComicDetailController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: comicDetailController)
      }
      
      func configurationController(_: Void = ()) -> ConfigurationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: configurationController)
      }
      
      func corridorsController(_: Void = ()) -> CorridorsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: corridorsController)
      }
      
      func trajectoryController(_: Void = ()) -> TrajectoryController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: trajectoryController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().trajectoryController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'trajectoryController' could not be loaded from storyboard 'Main' as 'TrajectoryController'.") }
        if _R.storyboard.main().comicDetailController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'comicDetailController' could not be loaded from storyboard 'Main' as 'ComicDetailController'.") }
        if _R.storyboard.main().configurationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'configurationController' could not be loaded from storyboard 'Main' as 'ConfigurationController'.") }
        if _R.storyboard.main().corridorsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'corridorsController' could not be loaded from storyboard 'Main' as 'CorridorsController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
